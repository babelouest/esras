{
  "log_out": "Log out",
  "submit": "Submit",
  "cancel": "Cancel",
  "ok": "Ok",
  "close": "Close",
  "register_new": "Register new client",
  "register_client": "Client registration",
  "register_client_name": "Display name",
  "register_client_name_help": "Name you can use to differenciate your clients",
  "register_client_redirect_uris": "Redirect URIs: ",
  "register_client_redirect_uris_help": "URIs allowed: http[s]://localhost[:xxxx]/, http[s]://*.local/ or {{redirectUriEsras}} is added by default",
  "register_client_confidential": "Confidential",
  "register_client_auth_method": "Token endpoint authentication method",
  "register_client_auth_method_help": "'none' is for public clients, 'private_key_jwt' requires a public key, the others will generate a client secret",
  "register_client_grant_types": "Grant types",
  "register_client_grant_types_help": "Default is 'authorization_code', 'refresh_token' is required if you want to refresh access tokens",
  "register_client_response_types": "Response types",
  "register_client_response_types_help": "If no response type is selected, 'code' will be set",
  "register_client_jwks": "Public key",
  "register_client_jwks_help": "The client public key must be in JWKS format",
  "register_client_jwks_required": "You must set a valid public key in JWKS format, and a token endpoint signing algorithm.",
  "register_client_success": "Client registered",
  "register_client_error": "Error in client registration",
  "register_client_token_endpoint_signing_alg": "Token endpoint signing algorithm",
  "register_client_token_endpoint_signing_alg_help": "The token endpoint signing algorithm is required for authentication methods 'private_key_jwt' or 'client_secret_jwt'",
  "register_client_backchannel_token_delivery_mode": "CIBA Mode",
  "register_client_backchannel_token_delivery_mode_help": "If the client want to run CIBA requests, it must select a token delivery mode to specify how the AS will return the tokens on success.",
  "register_client_backchannel_client_notification_endpoint": "CIBA Client Notification Endpoint",
  "register_client_backchannel_client_notification_endpoint_help": "This endpoint is used by the AS to notify the client when a CIBA authentication is completed by the user. This endpoint is required for CIBA modes Ping or Push",
  "register_client_backchannel_authentication_request_signing_alg": "CIBA request signing alg",
  "register_client_backchannel_authentication_request_signing_alg_help": "You can sign CIBA requests with a private key or the client secret",
  "register_client_backchannel_user_code_parameter": "Supports the user_code parameter",
  "register_client_backchannel_user_code_parameter_help": "If set to true, the client will be able to use the user_code functionality, to authenticate itself with the user.",
  "register_client_authorization_details_types": "Rich authorization request (RAR) types allowed",
  "register_client_authorization_details_types_help": "These are the rich authorization request types supported by the AS, select one or more if you want to use RAR requests.",
  "client_list_title": "Client list",
  "client_list_status_select": "Show status",
  "client_list_status_all": "All",
  "client_list_status": "Status",
  "client_list_status_enabled": "Enabled",
  "client_list_status_disabled": "Disabled",
  "client_list_name": "Name",
  "client_list_client_id": "Client ID",
  "client_list_client_secret": "Secret",
  "client_list_redirect_uris": "Redirect URIs",
  "client_list_registration": "Registration",
  "client_list_show_registration": "Show registration details",
  "client_list_run_client": "Run client",
  "client_list_edit_client": "Update client registration",
  "client_list_disable_client": "Disable client",
  "client_list_disable_client_message": "Are you sure you want to disable {{name}} ({{client_id}})?",
  "client_show_registration": "Client registration",
  "help_title": "Help",
  "help_esras_title": "Esras",
  "help_esras": "Esras is a little application designed to register OAuth2 clients, and use the clients in a simplified and didactic interface. Its functionalities are still work-in-progress, and have many bugs. You can open issues or send feature requests using the following address.",
  "help_status": "Disabling a client is irreversible, you must register a new client which will have a new client_id",
  "help_name": "The name of the client has no effect on the AS side, it's only useful for the client to make it more readable than a client_id",
  "help_client_id": "The client_id is a random string generated by the AS during the registration, it's a unique identifier for your client",
  "help_client_secret": "The client secret is a string that must remain secret between the client and the AS, as it is used by the AS to authenticate the client as a password, or as a key to sign requests",
  "help_redirect_uris": "Redirect URIs are URIs specified by the client to redirect user authentication requests. For security reasons, only localhost or localdomain URIs are allowed in here, in addition to this application redirect_uri",
  "help_redirect_uris_exec": "In here, you can only use this redirect_uri value. But this registered client can use other redirect URIs and be used outside of this page",
  "help_registration": "This is the result of the client registration sent by the AS. This JSON object contains all the AS knows about the client",
  "help_register": "You can register new clients and specify their configuration idividually. After creation, you can modify a client registration, except for the token_endpoint_auth_method, the client confidential settings and the client secret or public key",
  "help_response_type": "The response type specifies to the server how the client requires it answer. Response types available are 'code', 'token', 'id_token', 'none', or combined vallues separated by a space, e.g. 'code id_token'",
  "help_auth_method": "The auth method specifies how the parameters are passed to the AS auth/ endpoint: GET or POST",
  "help_auth_method_parameters": "How the auth parameters are passed to the AS: plain, JWT signed or JWT encrypted",
  "help_scope": "The scope is the authorization levels required by the client on behalf of the user, e.g. 'profile', 'email', etc. The scope 'openid' ire required to get an id_token.",
  "help_state": "The state is a value generated by the client, this value must be returned as-is by the AS so the client can identify the request. A state value is not mandatory but it's recommended by the standard",
  "help_nonce": "The nonce is an opaque value generated by the client, it must be a truly random value. The nonce value will bind the tokens with the client using cryptographic methods, and will add a layer of security. The nonce value is mandatory if the auth request has the scope 'openid' or the response type 'id_token'",
  "help_code_challenge_method": "The code_challenge_method is the method used for PKCE. Here only none and S256 are allowed, plain method is not allowed",
  "help_code_challenge": "The code_challenge is the SHA256 hash base64 encoded of the pkce_code_verifier. The pkce_code_verifier must then be sent to the server as-is during the authentication code grant in the token request.",
  "help_exec_auth": "The following url must be executed by the user to authenticate to the AS on this request, click on the link to run the auth request",
  "help_exec_auth_params": "Here are the detail of all query parameters",
  "help_exec_request": "Request sent (with extra line breaks for display purposes only)",
  "help_exec_response": "Response received (with extra line breaks for display purposes only)",
  "help_code": "The code is a value returned by the AS to the client via the redirect URI. The code must be used by the client to get an access token, optionally a refresh token, and an id_token when using OpenID Connect flow",
  "help_token_method": "The token method is the method used by the client to authenticate itself to the AS when running a token request. This value is set during the client registration.",
  "help_access_token": "The access token is the token returned by the AS to the client when a flow is complete. The client can then use the access token to access protected resources of a resource service by attaching this token to the request",
  "help_token_type": "The token type gives additional information on how to use the token, e.g. 'bearer', 'DPoP', etc.",
  "help_expires_in": "Token expiration time in seconds",
  "help_error_title": "Last error message",
  "help_error": "Error",
  "help_error_description": "Error description",
  "help_error_uri": "Error URI",
  "help_access_token_payload": "The following stringified JSON shows the claims contained in the access token payload",
  "help_refresh_token": "The refresh token is a token returned by the AS to the client when a code flow is complete. The client can use this refresh token to get a new access token if the current access token has expired",
  "help_id_token": "The id_token is a JWT containing claims use to identify the user who granted access to the client",
  "help_id_token_payload": "The following stringified JSON shows the claims contained in the id_token payload",
  "help_client_jwks": "The client JWKS is the set of private keys to use by the client to sign messages or requests, or decrypt messages from the AS",
  "help_client_jwks_warning": "Important notice",
  "help_client_jwks_warning_message": "The client JWKS must be one or more private keys. DO NOT use the private keys you use in other systems, but keys generated especially for here.",
  "help_grant_type": "The Authorization Grant is the command to use in the token endpoint to get authorization from the AS",
  "help_exec_token": "The following message shows the output of the token request. On succesfull response, the tokens will be stored and available in the 'Token results' tab",
  "help_exec_userinfo": "The following message shows the output of the userinfo request. On succesfull response, the result is displayed in the userinfo tab",
  "help_userinfo": "The userinfo endpoint returns information about the user who granted the access token given as authentication token. You can't use the userinfo endpoint with a client token, only access tokens.",
  "help_userinfo_get_jwt": "If this is checked, the userinfo response will be sent as a signed JWT from the server, to improve the integrity of the response.",
  "help_introspection": "The token introspection endpoint returns the information about the current access token. This endpoint is used to validate that an access token is still valid, and returns the metadata attached to it (scope, subject, issuer, expiration date, etc.)",
  "help_introspection_get_jwt": "If this is checked, the introspection response will be sent as a signed JWT from the server, to improve the integrity of the response.",
  "help_revocation": "The token revocation endpoint is used to invalidate a token. So introspecting this token after that will result on an invalid token result.",
  "help_exec_introspect": "The following message shows the output of the introspection request. On succesfull response, the result is displayed in the introspection tab",
  "help_exec_introspect_active": "Token valid",
  "help_exec_introspect_inactive": "Token invalid",
  "help_exec_introspect_error": "Token introspection request error",
  "help_exec_revocation": "The following message shows the output of the revocation request. After a succesfull response, the token target is no longer valid on the AS",
  "help_token_target": "The token target specifies which token to use in the introspection or revocation request",
  "help_token_exp": "Expiration time for the client assertion token. If the token auth method is client_secret_jwt or private_key_jwt, a signed JWT is generated on some endpoints to authenticate the request. This JWT claims will contain an iat claim (issued at) and an exp claim (expires at). The token expiration time is used to calculate the exp claim.",
  "help_par_request_uri": "The request_uri value generated by the AS to identify your request when the user will authenticate to the AS",
  "help_par_expires_in": "The expiration time in seconds for the request_uri",
  "help_exec_par_params": "Here are the details of the PAR response values",
  "help_use_dpop": "DPoP (OAuth 2.0 Demonstrating Proof-of-Possession) is a mechanism to bind an access token with a signing key. When an OAuth2 flow is used with a DPoP, a signed JWT is generated during the token request. The signing key thumbprint is then included in the access token metadata. Then, every time the access token is used to authenticate a resource access, a JWT signed with the same private key must be attached to the request.",
  "help_dpop_kid": "If you use multiple private keys, you can specify the key to sign DPoP tokens.",
  "help_client_kid": "If you use multiple private keys, you can specify the key to sign request tokens.",
  "help_dpop_jkt": "The dpop_jkt is the thumbprint of the key used to sign the DPoP token later. This parameter in the auth request enforce the DPoP security by binding this thumbprint to the returned code.",
  "help_exec_device_auth": "The following message shows the output of the device auth request. On succesfull response, the response values will be stored and available in the 'Device Request' tab",
  "help_exec_device_auth_params": "Here are the details of the device auth response values",
  "help_device_auth_code": "This code will be used by the client in the subsequent token requests to identify the auth request",
  "help_device_auth_user_code": "This code must be used by the user after authentication to validate the device request",
  "help_device_auth_verification_uri": "URI used by the client to enter the device user code",
  "help_device_auth_verification_uri_complete": "URI used by the client to automatically validate the device request",
  "help_device_auth_expires_in": "Duration of the device auth request in seconds",
  "help_device_auth_interval": "Minimal interval between each token verification by the client",
  "help_device_auth_request": "Run a device auth request",
  "help_device_auth_verification": "Run a device auth verification request to get a token response if completed by the user",
  "help_device_qr_code": "The following QR-Code can be scanned by an external device (phone, tablet, etc.) to directly access the link on another machine, like on a normal Device authentication flow.",
  "help_ciba_client_notification_token": "Bearer token provided by the Client that will be used by the OpenID Provider to authenticate the callback request to the Client. Required if the Client is registered to use Ping or Push modes.",
  "help_ciba_login_hint_format": "Format to use for the login_hint, either JSON, JWT (private key required) or id_token",
  "help_ciba_login_hint": "login_hint value used for the ciba request",
  "help_ciba_binding_message": "A human-readable identifier or message intended to be displayed on both the consumption device and the authentication device to interlock them together for the transaction by way of a visual cue for the end-user.",
  "help_ciba_user_code": "A secret code, such as a password or pin, that is known only to the user but verifiable by the OP. In this case, it's the value of the property 'user-code' in the user profile.",
  "help_ciba_auth_req_id": "Unique identifier to identify the authentication request made by the Client.",
  "help_ciba_expires_in": "Expiration time of the 'auth_req_id' in seconds since the authentication request was received.",
  "help_ciba_interval": "Minimum amount of time in seconds that the Client MUST wait between polling requests to the token endpoint.",
  "help_get_ciba_notification": "Get CIBA notification endpoint result (if any) for the last CIBA auth request when the client uses ping or push mode",
  "help_exec_ciba_notification": "CIBA notification endpoint result (if any) for the last CIBA auth request",
  "help_exec_ciba_notification_empty": "There is no notification endpoint result",
  "help_exec_ciba_notification_params": "CIBA notification endpoint result parameters",
  "help_exec_request_received": "Request received from the AS (with extra line breaks for display purposes only)",
  "help_ciba_ping_notification": "Ping notification received from the AS, you can run a CIBA token request to get the token result.",
  "help_rar_types": "The type of authorization details. The value of the type field determines the allowable contents of the object which contains it.",
  "help_rar_locations": "Location of the resource or resource server.",
  "help_rar_actions": "Kinds of actions to be taken at the resource.",
  "help_rar_datatypes": "Kinds of data being requested from the resource.",
  "help_rar_identifier": "Identifier indicating a specific resource available at the API.",
  "help_rar_privileges": "Types or levels of privilege being requested at the resource.",
  "help_rar_add": "Adds a new rich auth request to the next request. You must make sure the parameters are valid according to the AS.",
  "help_rar_show_list": "Below is the list of rich auth request for the next request.",
  "client_run": "Run OAuth2 client",
  "client_run_session_saved": "Session saved",
  "client_run_session_error": "Error in session save",
  "client_run_credentials": "Client credentials",
  "client_run_auth_request": "Auth request",
  "client_run_auth_error": "Error in auth request",
  "client_run_par_error": "Error in pushed auth request",
  "client_run_token_request": "Token request",
  "client_run_token_error": "Error in token request",
  "client_run_token_results": "Token results",
  "client_run_client_id": "Client ID",
  "client_run_client_secret": "Client Secret",
  "client_run_client_name": "Client name",
  "client_run_redirect_uris": "Redirect URI",
  "client_run_response_type": "Response type",
  "client_run_auth_method": "Auth method",
  "client_run_auth_method_parameters": "Auth method parameters",
  "client_run_scope": "Scope",
  "client_run_scopes_available": "Scopes available according to the AS",
  "client_run_state": "State",
  "client_run_nonce": "Nonce",
  "client_run_pkce_method": "PKCE method",
  "client_run_pkce_code_verifier": "PKCE code verifier",
  "client_run_generate": "Generate",
  "client_run_auth_btn": "Run Auth Request",
  "client_run_par_btn": "Run Pushed Auth Request",
  "client_run_token_btn": "Run token request",
  "client_run_code": "Code",
  "client_run_token_method": "Token method",
  "client_run_access_token": "Access Token",
  "client_run_token_type": "Token type",
  "client_run_expires_in": "Expires in",
  "client_run_show_access_token": "Show Access Token claims",
  "client_run_refresh_token": "Refresh Token",
  "client_run_id_token": "ID Token",
  "client_run_client_jwks": "Client JWKS",
  "client_run_client_jwks_error": "You must use a JWKS format",
  "client_run_client_kid": "Client key to use on multiple keys to sign requests",
  "client_run_client_kid_first": "First one on the list",
  "client_run_token_exp": "Client assertion token expiration",
  "client_run_grant_type": "Authorization Grant",
  "client_run_userinfo": "Userinfo",
  "client_run_userinfo_btn": "Run userinfo request",
  "client_run_userinfo_error": "Error in userinfo request",
  "client_run_userinfo_get_jwt": "Get response as JWT",
  "client_run_userinfo_response": "Userinfo response",
  "client_run_token_introspection": "Token introspection and revocation",
  "client_run_introspection_btn": "Run introspection request",
  "client_run_introspection_error": "Error in introspection request",
  "client_run_introspection_response": "Introspection response",
  "client_run_revocation_btn": "Run revocation request",
  "client_run_revocation_error": "Error in revocation request",
  "client_run_token_target": "Token target",
  "client_run_use_dpop": "Use DPoP (OAuth 2.0 Demonstrating Proof-of-Possession)",
  "client_run_dpop_kid": "Client key to use on multiple keys to sign DPoP tokens",
  "client_run_device_request": "Device Request",
  "client_run_device_auth": "Execute a new device auth request",
  "client_run_device_verification": "Execute a device code verification",
  "client_run_device_auth_code": "Device authorization code",
  "client_run_device_auth_error": "Error running device authentication request",
  "client_run_device_auth_user_code": "Device authorization user code",
  "client_run_device_auth_verification_uri": "Device auth verification URI",
  "client_run_device_auth_verification_uri_complete": "Device auth verification URI complete",
  "client_run_device_auth_expires_in": "Device auth code expires in (seconds)",
  "client_run_device_auth_interval": "Device auth code check interval (seconds)",
  "client_run_show_qc_code": "Show QR-Code for this URI",
  "client_run_ciba_request": "CIBA (Client-Initiated Backchannel Authentication) request",
  "client_run_ciba_auth": "Execute a new CIBA authentication request",
  "client_run_ciba_auth_error": "Error running CIBA authentication request",
  "client_run_ciba_verification": "Execute a CIBA verification request",
  "client_run_ciba_login_hint_identifier_sub": "sub",
  "client_run_ciba_login_hint_identifier_username": "username",
  "client_run_ciba_client_notification_token": "Client notification token",
  "client_run_ciba_login_hint_format": "Login hint format",
  "client_run_ciba_login_hint": "Login hint",
  "client_run_ciba_binding_message": "Binding message",
  "client_run_ciba_user_code": "User code",
  "client_run_ciba_auth_req_id": "Auth response auth_req_id",
  "client_run_ciba_expires_in": "Auth response expires_in",
  "client_run_ciba_interval": "Auth response interval",
  "client_get_ciba_notification": "CIBA notification result",
  "client_run_rar_request": "Rich Authorization Requests",
  "client_run_rar_types": "Type",
  "rar_locations": "Locations",
  "rar_actions": "Actions",
  "rar_datatypes": "Data types",
  "rar_identifier": "Identifier",
  "rar_privileges": "Privileges",
  "client_run_rar_add": "Add a rich auth request",
  "client_run_rar_show": "Show rich auth requests ({{count}})"
}
